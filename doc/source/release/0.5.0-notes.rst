.. _release.0.5.0-notes:

.. currentmodule:: smash

=========================
smash 0.5.0 Release Notes
=========================

The smash 0.5.0 release continues the ongoing work to improve the handling, fix possible bugs, clarify the documentation. The highlights are:

------------
Contributors
------------

This release was made possible thanks to the contributions of:

---------------
Compatibilities
---------------

------------
Deprecations
------------

------------
Improvements
------------

Reading precipitation with YY/MM/DD access
******************************************

This mode is triggered by the flag setup.prcp_yymmdd_access=True. The precipitation file suppose to be stored in a directory YY/MM/dd. This option is useful of the model is ran time step by time step (many incremental runs). In that case searching the precipitation files can be relatively slow (1 second multiplicate by the number of run). With this mode it is optimized and it is faster. 

------------
New Features
------------

New regularization function
****************************

hard-smoothing : the smoothing regularization function is applied on parameter or states directly. This behavior differ from the "smoothing" mode where the regularization is applied on the difference between the background and the control (parameters or states)

New functions for reading and writting hdf5 files
*************************************************
 
The new function are generic. You can save a dictionary to an hdf5, save an object (not only smash) to an hdf5, read an object as dictionary, read an hdf5 as a dict, read an hdf5 as a smash model object. Functions are provided by smash.io.hdf5_io.py. hdf5 can be opened in read-only to provide several simultaneous access. During the export or the reading, the structure of the dictionnary or object are preserved. When saving an object or a dictionnary in an hdf5, the location can be specified so that dictionary or object can be saved side by side at different places.

-----
Fixes
-----

Boundary conditions checking
****************************

The boundary condition checking previously used a tolerance of 1e-6, which caused issues in certain cases due to machine precision when passing from Python to Fortran via the f90wrapper.
To address this problem, the tolerance has been decreased to 1e-3.

See issue `#23 <https://github.com/DassHydro-dev/smash/issues/23>`__.

Bug fixes when generating the l-curve.
**************************************

Issues have been solved when selecting the optimal weight for the regularization term.
